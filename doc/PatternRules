樣式規則 Pattern Rules

		^ 		：定位規則，文字開頭
		$		：定位規則，文字尾端
		. 		：單一規則，代表任意字元
	[chars]	：單一規則，有 chars 裡其中一個字元
	[^chars]：單一規則，沒有 chars 裡其中一個字元
		?  	：倍數規則， 0 或 1 個的前導符號
		*  	：倍數規則， 0 或多個的前導符號
		+  	：倍數規則， 1 或多個的前導符號
	 {n,m}  	：表示前一符號在字串中的重覆次數。
					例如：
						A{2} 表示 'A' 重覆兩次 (即 'AA') ；
						A{2,} 表示字串含有 2 到無數多個 'A' ；
						A{2,5} 表示含有 2 到 5 個 'A' 。
	\char	：轉義，將 char 視為一般字元，而非樣式規則字元
	(string)：子樣式規則，將 string 記憶起來，歸於一組。
            		稍後可利用 \n 的方式，將第 n 組 string 提出。


★Regular Expressions Library : Dates And Times
This section of the library contains regular expressions for matching dates and times. It is possible to write very loose checks that simply look for the presence of numbers between colons or dashes. The examples here attempt to be more sophisticated. To match a string that matches one of these expressions as a whole rather than in part, put a ^ before the expression and a $ after it. For example, \d+ becomes ^\d+$.

	24-Hour HH:MM:SS
		Description: Matches a 24 hour time in the format HH:MM:SS, capturing the hours, minutes and seconds.
		Perl Compatible Form: ([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)
		POSIX Form: ([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])
	
	24-Hour HH:MM:SS With Optional Leading Zeroes
		Description: Matches a 24 hour time in the format HH:MM:SS, capturing the hours, minutes and seconds. Will also match if there are no leading zeroes, that is 2:43:55 will be matched as well as 02:43:55. To only make the leading zero on the hour optional, remove the ? after each [0-5].
		Perl Compatible Form: ([0-1]?\d|2[0-3]):([0-5]?\d):([0-5]?\d)
		POSIX Form: ([0-1]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])
	
	12-Hour HH:MM:SS
		Description: Matches a 12 hour time in the format HH:MM:SS, capturing the hours, minutes and seconds.
		Perl Compatible Form: (0\d|1[0-2]):([0-5]\d):([0-5]\d)
		POSIX Form: (0[0-9]|1[0-2]):([0-5][0-9]):([0-5][0-9])
	
	12-Hour HH:MM:SS With Optional Leading Zeroes
		Description: Matches a 12 hour time in the format HH:MM:SS, capturing the hours, minutes and seconds. Will also match if there are no leading zeroes, that is 2:43:55 will be matched as well as 02:43:55. To only make the leading zero on the hour optional, remove the ? after each [0-5].
		Perl Compatible Form: (0?\d|1[0-2]):([0-5]?\d):([0-5]?\d)
		POSIX Form: (0?[0-9]|1[0-2]):([0-5]?[0-9]):([0-5]?[0-9])
		
	YYYY-MM-DD (Loose)
		Description: Matches something that looks like a date in YYYY-MM-DD format. It does not take account of number of days in a month and certainly doesn't have any constraints relating to leap years.
		Perl Compatible Form: (\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])
		POSIX Form: ([0-9][0-9][0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])
	
	DD-MM-YYYY (Loose)
		Description: Matches something that looks like a date in DD-MM-YYYY format. It does not take account of number of days in a month (but does limit it to no more than 31) and certainly doesn't have any constraints relating to leap years.
		Perl Compatible Form: (0[1-9]|[12]\d|3[01])-(0[1-9]|1[0-2])-(\d{4})
		POSIX Form: (0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-([0-9][0-9][0-9][0-9])
	
	MM-DD-YYYY (Loose)
		Description: Matches something that looks like a date in MM-DD-YYYY format. It does not take account of number of days in a month (but does limit it to no more than 31) and certainly doesn't have any constraints relating to leap years.
		Perl Compatible Form: (0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])-(\d{4})
		POSIX Form: (0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-([0-9][0-9][0-9][0-9])
	
	YYYY-MM-DD (Tight)
		Description: Matches a date in the format YYYY-MM-DD. It does take account of the number of days that certain months have, but does not do leap year detection so the 29th of February will always match no matter which year it is. A small bit of additional application code can be used to check this.
		Perl Compatible Form: (\d{4})-(0[13578]|1[02])-(0[1-9]|[12]\d|3[01])|(\d{4})-(0[469]|11])-
		(0[1-9]|[12]\d|30)|(\d{4})-(02)-(0[1-9]|1\d|2[0-9])
		POSIX Form: ([0-9][0-9][0-9][0-9])-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|([0-9][0-9][0-9][0-9])-(0[469]|11])-(0[1-9]|[12][0-9]|30)|([0-9]{4})-(02)-(0[1-9]|1[0-9]|2[0-9])
	
	YYYY-MM-DD (With Leap Year Detection)
		Description: This is probably best done with application level logic, but it is possible to write a regular expression that basically works. This one will work up until the year 2100, when it will incorrectly detect that year as a leap year. It is possible to fix that, but it would make this already huge regular expression even bigger.
		Perl Compatible Form: (\d{4})-(0[13578]|1[02])-(0[1-9]|[12]\d|3[01])|
		(\d{4})-(0[469]|11])-(0[1-9]|[12]\d|30)|
		(\d\d[0248][048]|\d\d[13579][26])-(02)-(0[1-9]|1\d|2\d)|
		(\d\d[0248][1235679]|\d\d[13579][01345789])-(02)-(0[1-9]|1\d|2[0-8])
		POSIX Form: ([0-9][0-9][0-9][0-9])-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|([0-9][0-9][0-9][0-9])-(0[469]|11])-(0[1-9]|[12][0-9]|30)|([0-9][0-9][0248][048]|[0-9][0-9][13579][26])-(02)-(0[1-9]|1[0-9]|2[0-9])|([0-9][0-9][0248][1235679]|[0-9][0-9][13579][01345789])-(02)-(0[1-9]|1[0-9]|2[0-8])
	
☆A regular expression for this datetime format
	^(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))$

★Regular Expression for TIME for 24 hr clock time and AM/PM
	^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$
	
	^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0]\d|[1][0-2])(\:[0-5]\d){1,2})*\s*([aApP][mM]{0,2})?$

☆Regular Expression for TIME for 24 hr clock time
	^(20|21|22|23|[01]\d|\d)(([:][0-5]\d){1,2})$

★Regular Expression for 「mm/dd/yyyy hh:MM:ss」 Datetime for all AD years, including leap years. 
	(?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$

☆Regular Expression for dd/mm/yyyy hh:MM:ss Datetime
	(?n:^(?=\d)((?<day>31(?!(.0?[2469]|11))|30(?!.0?2)|29(?(.0?2)(?=.{3,4}(1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|0?[1-9]|1\d|2[0-8])(?<sep>[/.-])(?<month>0?[1-9]|1[012])\2(?<year>(1[6-9]|[2-9]\d)\d{2})(?:(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)

	DD/MM/YYYY format New DateTime Regex. Rebuilt better than before, better, stronger, faster. This regex will validate a date, time or a datetime. It will also capture the date fields and the time. Dates are in the DD/MM/YYYY format and validated for months, number of days in a month and leap years (29/2) Date field can be separated by matched periods(.), dashes(-) or forward slashes(/). Year range 1600-9999 Time is either 12 hour AM/PM format (HH:mm:ss AM), where minutes and seconds are optional. AM or PM required. or 24 hour military format (HH:mm:SS), from 00:00:00 to 23:59:59, where hours and minutes fields are required, including leading 0 for hours less than 10. Datetime is the above date and time formats separated by a space, with the date first (DD/MM/YYYY HH:mm:SS) !IMPORTANT NOTE: your regex engine must support lookaheads and named groups to use this expression

★This RE validate the full name of the months.
	^(?:J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber)$

☆Regular Expression Validator Expression For Date & Time
	^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$

		Validation Expression For Date & Time 
		
		Expression become true
		
		04-05-2007 10:00:00 PM 
		04-05-2007 10:00:00
		04-05-2007 14:00:00 
		04-05-2007 10:00 PM 
		04-05-2007
		
		Expression become false
		04-05-2007 14:00:00 AM
		
		Validation Expression =
		^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))
		(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|
		[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]
		|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$"

